{"version":3,"sources":["components/ColorButton.tsx","components/Header.tsx","utils.ts","components/Plant.tsx","components/PlantList.tsx","components/Footer.tsx","api/database.ts","components/Camera.tsx","hooks/useUserMedia.ts","components/AddPlant.tsx","hooks/useData.ts","App.tsx","index.tsx"],"names":["ToggleColorModeButton","useColorMode","colorMode","toggleColorMode","onClick","icon","aria-label","Header","background","py","position","top","m","role","dateAddDays","d","days","x","Date","setDate","getDate","dateDiff","d1","d2","dif","Math","max","getTime","min","seconds","round","minutes","hours","weeks","PlantListItem","props","plant","selected","onItemClick","nextWater","lastWatered","cycleDays","mb","mr","p","w","borderWidth","borderRadius","borderColor","cursor","userSelect","width","src","image","alt","name","templateColumns","textAlign","gridColumn","as","BsDroplet","height","PlantList","plants","selection","justifyContent","map","elt","id","indexOf","Footer","children","rest","backgroundColor","bottom","plantStore","callbacks","openDatabase","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","result","createObjectStore","keyPath","onsuccess","onerror","ev","onblocked","loadPlants","then","idb","transaction","objectStore","getAll","target","console","error","onUpdate","c","splice","addPlant","item","a","r","add","deletePlant","delete","created","updatePlant","put","Camera","onSnap","stream","requestedMedia","useState","mediaStream","setMediaStream","useEffect","getTracks","forEach","track","stop","navigator","mediaDevices","getUserMedia","alert","undefined","enableStream","useUserMedia","video","facingMode","audio","videoRef","useRef","current","srcObject","border","ref","autoPlay","playsInline","muted","onCanPlay","play","my","rightIcon","canvas","document","createElement","context","getContext","drawImage","toDataURL","remove","handleSnap","AddPlant","useDisclosure","isOpen","onOpen","onClose","React","setName","cycle","setCycle","setImage","page","setPage","closeModal","h","onSubmit","e","preventDefault","hidden","isRequired","onChange","value","str","num","type","useData","data","setData","callback","newData","push","App","setSelection","sort","b","index","filter","disabled","length","waterItems","removeItems","render","getElementById"],"mappings":"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","file":"static/js/main.4d90ccce.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { IconButton, useColorMode } from \"@chakra-ui/react\";\r\nimport { BsSun, BsMoon } from \"react-icons/bs\";\r\n\r\nexport const ToggleColorModeButton = () => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  return (\r\n    <IconButton\r\n      onClick={toggleColorMode}\r\n      icon={colorMode === \"dark\" ? <BsSun /> : <BsMoon />}\r\n      aria-label=\"Toggle Color Mode\"\r\n    />\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { Flex, Box, Spacer, Heading, Divider } from \"@chakra-ui/react\";\r\nimport { ToggleColorModeButton } from \"./ColorButton\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <Box background=\"tomato\" py={1} position=\"sticky\" top=\"0\">\r\n      <Flex m={2}>\r\n        <Heading>\r\n          Pl\r\n          <span role=\"img\" aria-label=\"Ant\">\r\n            üêú\r\n          </span>\r\n          Ast!c\r\n        </Heading>\r\n        <Spacer />\r\n        <ToggleColorModeButton />\r\n      </Flex>\r\n      <Divider />\r\n    </Box>\r\n  );\r\n};\r\n","/**\r\n * Calculate a new date with a given offset of days\r\n * @param d The date to add days to\r\n * @param days The days to add\r\n */\r\nexport const dateAddDays = (d: Date, days: number): Date => {\r\n  const x = new Date(d);\r\n  x.setDate(x.getDate() + days);\r\n  return x;\r\n};\r\n\r\n/**\r\n * Calculates the difference between two dates\r\n * @param d1 the first date\r\n * @param d2 the second date\r\n */\r\nexport const dateDiff = (d1: Date, d2: Date) => {\r\n  const later = Math.max(d1.getTime(), d2.getTime());\r\n  const earlier = Math.min(d1.getTime(), d2.getTime());\r\n  const dif = later - earlier;\r\n  return {\r\n    seconds: Math.round(dif / 1000),\r\n    minutes: Math.round(dif / 1000 / 60),\r\n    hours: Math.round(dif / 1000 / 60 / 60),\r\n    days: Math.round(dif / 1000 / 60 / 60 / 24),\r\n    weeks: dif / 1000 / 60 / 60 / 24 / 7,\r\n  };\r\n};\r\n\r\n//Compatibility Stuff\r\n/**\r\n *\r\n * @deprecated\r\n */\r\nexport const getDateDifDays = (d1: Date, d2: Date) => {\r\n  console.warn(\r\n    \"Function getDateDifDays is deprecated, consider switching to dateDiff().days\"\r\n  );\r\n  return dateDiff(d1, d2).days;\r\n};\r\n","import * as React from \"react\";\r\n\r\nimport { Box, Grid, GridItem, Icon, Image } from \"@chakra-ui/react\";\r\nimport { BsDroplet } from \"react-icons/bs\";\r\nimport { Plant } from \"../api/types\";\r\n\r\nimport { addPlant } from \"../api/database\";\r\nimport { dateDiff, dateAddDays } from \"../utils\";\r\n\r\n\r\nexport const PlantListItem = (props: {\r\n  plant: Plant;\r\n  selected: boolean;\r\n  onItemClick: Function;\r\n}) => {\r\n  const { plant, selected, onItemClick } = props;\r\n  const nextWater = dateDiff(\r\n    dateAddDays(plant.lastWatered, plant.cycleDays),\r\n    new Date()\r\n  ).days;\r\n  return (\r\n    <Box\r\n      mb={3}\r\n      mr={3}\r\n      p={2}\r\n      w=\"100px\"\r\n      borderWidth={2}\r\n      borderRadius=\"lg\"\r\n      borderColor={selected ? \"lightblue\" : \"\"}\r\n      onClick={() => {\r\n        onItemClick(plant);\r\n      }}\r\n      cursor=\"pointer\"\r\n      userSelect=\"none\"\r\n    >\r\n      <Image width={\"full\"} src={plant.image} alt={plant.name} />\r\n      <Grid templateColumns=\"30% 70%\">\r\n        <GridItem textAlign=\"center\" gridColumn=\"1/3\">\r\n          {plant.name}\r\n        </GridItem>\r\n        <Icon as={BsDroplet} height=\"full\" />\r\n        <GridItem>{nextWater} days</GridItem>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { Plant } from \"../api/types\";\r\nimport { Grid } from \"@chakra-ui/react\";\r\nimport { PlantListItem } from \"./Plant\";\r\n\r\nexport const PlantList = (props: {\r\n  plants: Plant[];\r\n  selection: Plant[];\r\n  onItemClick: Function;\r\n}) => {\r\n  const { plants, selection, onItemClick } = props;\r\n  return (\r\n    <Grid\r\n      m={4}\r\n      justifyContent=\"center\"\r\n      templateColumns=\"repeat(auto-fill,120px)\" //TODO: Responisve\r\n    >\r\n      {plants.map((elt, id) => (\r\n        <PlantListItem\r\n          key={id}\r\n          plant={elt}\r\n          selected={selection.indexOf(elt) >= 0}\r\n          onItemClick={onItemClick}\r\n        />\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Flex, Box, Spacer, ButtonGroup } from \"@chakra-ui/react\";\r\n\r\nexport const Footer = (props: any) => {\r\n  const { children, ...rest } = props;\r\n  return (\r\n    <Box\r\n      backgroundColor=\"tomato\"\r\n      w=\"full\"\r\n      position=\"fixed\"\r\n      bottom=\"0\"\r\n      {...rest}\r\n    >\r\n      <Flex py={1}>\r\n        <Spacer />\r\n        <ButtonGroup>{children ? children : <></>}</ButtonGroup>\r\n        <Spacer />\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n","import { Plant } from \"./types\";\r\n\r\nconst DB = \"plantastic\";\r\nconst plantStore = \"plants\";\r\nconst VER = 2;\r\n\r\n//Holds callbacks provided in subscribeUpdateOnce()\r\nconst callbacks: Function[] = [];\r\n\r\n/**\r\n * Open the database\r\n */\r\nconst openDatabase = (): Promise<IDBDatabase> => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB, VER);\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      /* TODO: Build Database */\r\n      const db = request.result;\r\n      db.createObjectStore(plantStore, {\r\n        keyPath: \"created\",\r\n      });\r\n    };\r\n    request.onsuccess = () => {\r\n      resolve(request.result);\r\n    };\r\n    request.onerror = (ev) => {\r\n      reject(`Unknown error occured ${ev}`);\r\n    };\r\n    request.onblocked = () => {\r\n      reject(`User blocked input`);\r\n    };\r\n  });\r\n};\r\n\r\n//Subscribe to updates to the database\r\nexport const subscribeUpdateOnce = (callback: Function) => {\r\n  callbacks.push(callback);\r\n};\r\n\r\n//Get all plants from the database\r\nexport const loadPlants = (): Promise<Plant[]> => {\r\n  return new Promise((resolve) => {\r\n    openDatabase().then((idb) => {\r\n      const store = idb\r\n        .transaction(plantStore, \"readonly\")\r\n        .objectStore(plantStore);\r\n\r\n      const request = store.getAll();\r\n      request.onsuccess = (ev) => {\r\n        //@ts-ignore\r\n        resolve(ev.target.result);\r\n      };\r\n      request.onerror = () => {\r\n        console.error(\"Error reading indexed db\");\r\n        resolve([]);\r\n      };\r\n    });\r\n  });\r\n};\r\n\r\n//Execute all callbacks and remove them\r\nconst onUpdate = () => {\r\n  loadPlants().then((plants) => {\r\n    for (const c of callbacks) {\r\n      c(plants);\r\n      callbacks.splice(0, 1); //remove event callbak\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Adds an item to the database\r\n * @param item The plant item to add\r\n */\r\nexport const addPlant = async (item: Plant) => {\r\n  openDatabase().then((idb) => {\r\n    const store = idb\r\n      .transaction(plantStore, \"readwrite\")\r\n      .objectStore(plantStore);\r\n\r\n    const r = store.add(item);\r\n    r.onerror = () => {\r\n      console.error(`Error writing item ${item}`);\r\n      onUpdate();\r\n    };\r\n    r.onsuccess = () => {\r\n      onUpdate();\r\n    };\r\n  });\r\n};\r\n\r\n/**\r\n * Deletes an item from the database\r\n * @param item The plant item to delete\r\n */\r\nexport const deletePlant = async (item: Plant) => {\r\n  openDatabase().then((idb) => {\r\n    const store = idb\r\n      .transaction(plantStore, \"readwrite\")\r\n      .objectStore(plantStore);\r\n\r\n    store.delete(item.created);\r\n    onUpdate();\r\n  });\r\n};\r\n\r\n/**\r\n * Updates an item in the database or creates it if it is new\r\n * @param item The plant item to update\r\n */\r\nexport const updatePlant = async (item: Plant) => {\r\n  openDatabase().then((idb) => {\r\n    const store = idb\r\n      .transaction(plantStore, \"readwrite\")\r\n      .objectStore(plantStore);\r\n\r\n    store.put(item);\r\n    onUpdate();\r\n  });\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport { Box, Button, Center } from \"@chakra-ui/react\";\r\nimport { BiCamera } from \"react-icons/bi\";\r\nimport { useUserMedia } from \"../hooks/useUserMedia\";\r\n\r\nexport const Camera = (props: {\r\n  onSnap?: (data: string) => void;\r\n  width: number;\r\n  height: number;\r\n}) => {\r\n  const { onSnap, width, height } = props;\r\n  const stream = useUserMedia({\r\n    video: { facingMode: \"environment\", width, height },\r\n    audio: false,\r\n  });\r\n  const videoRef = useRef<HTMLVideoElement>(null);\r\n\r\n  if (stream && videoRef.current && !videoRef.current.srcObject) {\r\n    videoRef.current.srcObject = stream;\r\n  }\r\n\r\n  const handleSnap = () => {\r\n    if (stream) {\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      const context = canvas.getContext(\"2d\");\r\n      videoRef.current && context && context.drawImage(videoRef.current, 0, 0);\r\n      const d = canvas.toDataURL();\r\n      canvas.remove();\r\n      onSnap && onSnap(d);\r\n    } else {\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box p={2} border=\"1px\">\r\n      <Center>\r\n        <video\r\n          ref={videoRef}\r\n          autoPlay\r\n          playsInline\r\n          muted\r\n          onCanPlay={() => {\r\n            videoRef.current?.play();\r\n          }}\r\n        />\r\n      </Center>\r\n      <Center my={2}>\r\n        <Button\r\n          rightIcon={<BiCamera />}\r\n          onClick={() => {\r\n            handleSnap();\r\n          }}\r\n        >\r\n          Snap!\r\n        </Button>\r\n      </Center>\r\n    </Box>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useUserMedia = (requestedMedia: MediaStreamConstraints) => {\r\n  const [mediaStream, setMediaStream] = useState<MediaStream>();\r\n\r\n  useEffect(() => {\r\n    const enableStream = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia(\r\n          requestedMedia\r\n        );\r\n        setMediaStream(stream);\r\n      } catch (err) {\r\n        alert(err);\r\n        console.error(err);\r\n        setMediaStream(undefined);\r\n      }\r\n    };\r\n\r\n    if (!mediaStream) {\r\n      enableStream();\r\n    } else {\r\n      return function cleanUp() {\r\n        mediaStream.getTracks().forEach((track) => track.stop());\r\n      };\r\n    }\r\n  }, [mediaStream, requestedMedia]);\r\n\r\n  return mediaStream;\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Center,\r\n  FormControl,\r\n  FormLabel,\r\n  Image,\r\n  Input,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  NumberDecrementStepper,\r\n  NumberIncrementStepper,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { Plant } from \"../api/types\";\r\nimport { addPlant } from \"../api/database\";\r\nimport { Camera } from \"./Camera\";\r\n\r\nexport const AddPlant = () => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [name, setName] = React.useState(\"\");\r\n  const [cycle, setCycle] = React.useState(0);\r\n  const [image, setImage] = React.useState(\"\");\r\n  const [page, setPage] = React.useState(0);\r\n  const closeModal = () => {\r\n    setName(\"\");\r\n    setCycle(0);\r\n    setImage(\"\");\r\n    setPage(0);\r\n    onClose();\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const p: Plant = {\r\n      created: new Date(),\r\n      lastWatered: new Date(),\r\n      name,\r\n      image,\r\n      cycleDays: cycle,\r\n    };\r\n    addPlant(p);\r\n    //Clear Controls\r\n    closeModal();\r\n  };\r\n\r\n  const nextPage = () => {\r\n    if (page < 1) setPage(page + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={onOpen}>Add Plant</Button>\r\n      <Modal isOpen={isOpen} onClose={closeModal}>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"lg\" p={2} w=\"sm\">\r\n          <ModalHeader>Add Plant</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody position=\"relative\">\r\n            <form onSubmit={handleSubmit}>\r\n              <Box hidden={page !== 0}>\r\n                <FormControl isRequired>\r\n                  <FormLabel>Beatiful Image</FormLabel>\r\n                  <Camera\r\n                    width={200}\r\n                    height={200}\r\n                    onSnap={(d) => {\r\n                      setImage(d);\r\n                      nextPage();\r\n                    }}\r\n                  />\r\n                </FormControl>\r\n              </Box>\r\n              <Box hidden={page !== 1}>\r\n                <Center>\r\n                  <Image src={image} />\r\n                </Center>\r\n                <FormControl isRequired>\r\n                  <FormLabel>Name</FormLabel>\r\n                  <Input\r\n                    onChange={({ target }) => {\r\n                      setName(target.value);\r\n                    }}\r\n                  />\r\n                </FormControl>\r\n\r\n                <FormControl isRequired>\r\n                  <FormLabel>Water every days?</FormLabel>\r\n                  <NumberInput\r\n                    onChange={(str, num) => {\r\n                      setCycle(num);\r\n                    }}\r\n                  >\r\n                    <NumberInputField />\r\n                    <NumberInputStepper>\r\n                      <NumberIncrementStepper />\r\n                      <NumberDecrementStepper />\r\n                    </NumberInputStepper>\r\n                  </NumberInput>\r\n                </FormControl>\r\n                <Button my={2} type=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Box>\r\n            </form>\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import { Plant } from \"../api/types\";\r\nimport { loadPlants, subscribeUpdateOnce } from \"../api/database\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport const useData = () => {\r\n  const [data, setData] = useState<Plant[]>([]);\r\n\r\n  useEffect(() => {\r\n    loadPlants().then((data) => {\r\n      setData(data);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleUpdate = (newData: Plant[]) => {\r\n      setData(newData);\r\n    };\r\n    subscribeUpdateOnce(handleUpdate);\r\n  });\r\n\r\n  return data;\r\n};\r\n","import * as React from \"react\";\r\nimport { Header, PlantList, Footer, AddPlant } from \"./components\";\r\nimport { dateAddDays, dateDiff } from \"./utils\";\r\nimport { useData } from \"./hooks/useData\";\r\nimport { Box, Button } from \"@chakra-ui/react\";\r\nimport { Plant } from \"./api/types\";\r\nimport { updatePlant, deletePlant } from \"./api/database\";\r\n\r\nexport const App = () => {\r\n  const data = useData();\r\n  const [selection, setSelection] = React.useState<Plant[]>([]);\r\n\r\n  const onItemClick = (p: Plant) => {\r\n    const index = selection.indexOf(p);\r\n    //Item is new\r\n    if (index === -1) setSelection([...selection, p]);\r\n    //Item is unselected\r\n    else setSelection(selection.filter((elt) => elt.created !== p.created));\r\n  };\r\n  const waterItems = () => {\r\n    for (const p of selection) {\r\n      p.lastWatered = new Date();\r\n      updatePlant(p);\r\n    }\r\n    setSelection([]);\r\n  };\r\n  const removeItems = () => {\r\n    for (const p of selection) {\r\n      deletePlant(p);\r\n    }\r\n  };\r\n\r\n  data.sort(\r\n    (a, b) =>\r\n      dateDiff(dateAddDays(a.lastWatered, a.cycleDays), new Date()).days -\r\n      dateDiff(dateAddDays(b.lastWatered, b.cycleDays), new Date()).days\r\n  );\r\n  return (\r\n    <Box h=\"100vh\">\r\n      <Header />\r\n\r\n      <PlantList\r\n        plants={data}\r\n        selection={selection}\r\n        onItemClick={onItemClick}\r\n      />\r\n      <Footer>\r\n        <Button\r\n          disabled={selection.length === 0}\r\n          onClick={() => {\r\n            waterItems();\r\n          }}\r\n        >\r\n          Watered!\r\n        </Button>\r\n        <Button\r\n          disabled={selection.length === 0}\r\n          onClick={() => {\r\n            removeItems();\r\n          }}\r\n        >\r\n          Remove\r\n        </Button>\r\n        <AddPlant />\r\n      </Footer>\r\n    </Box>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { App } from \"./App\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nrender(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}